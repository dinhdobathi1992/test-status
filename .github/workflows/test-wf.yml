name: List Changes After PR Merge

on:
  pull_request:
    types:
      - closed

jobs:
  list-changes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Install vercel
        run: npm i -g vercel
      - name: List Changed Files
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          # Get the base and head SHAs of the merged pull request
          BASE_SHA=$(jq -r '.pull_request.base.sha' "$GITHUB_EVENT_PATH")
          HEAD_SHA=$(jq -r '.pull_request.head.sha' "$GITHUB_EVENT_PATH")
          echo "Base SHA: $BASE_SHA"
          echo "Head SHA: $HEAD_SHA"
          # List changed files between base and head SHAs
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA")

          # Print the list of changed files
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Iterate through each file in the list
          while IFS= read -r file; do
              # Get the file extension
              extension="${file##*.}"

              # Check if the file has a ".local" or ".prod" extension
              if [ "$extension" == "local" ] || [ "$extension" == "prod" ]; then
                  # Append the file to the filtered_files variable
                  filtered_files+="$file"$'\n'
              fi
          done <<< "$CHANGED_FILES"

          # Print the filtered files
          echo "Filtered files:"
          echo "$filtered_files"

          for file in $filtered_files; do
            echo "File changed: $file"
            project_name=$(echo "$file" | sed 's|/.env.prod$||;s|/.env.local$||' | awk -F/ '{print $NF}')
            env="${file#*.env.}"
            echo "Environment: $env"
            echo "Project name : $project_name"
            working_folder=$(dirname "$file")
            echo "Working folder: $working_folder"
            json_data=$(cat .github/config/projects.json)
            PROJECT_ID=$(echo $json_data | jq -r ".[] | select(.project == \"$project_name\")" | jq .project_id)
            PROJECT_ID=${PROJECT_ID//\"/}
            echo "Project ID: $PROJECT_ID"
            echo $VERCEL_TOKEN
            echo $VERCEL_ORG_ID

            echo "####testing vercel"
            vercel --version
            VERCEL_ORG_ID=$VERCEL_ORG_ID VERCEL_PROJECT_ID=$PROJECT_ID vercel env ls --token $VERCEL_TOKEN
            for line in $(tail -n +2 $file) ; do
              echo "Line: $line"
              key=$(echo $line | awk -F= '{print $1}')
              value=$(echo $line | awk -F= '{print $2}')
              echo "Key: $key"
              if [ $key == "REACT_LOGO_WIDTH" ]; then
                echo "Key is REACT_LOGO_WIDTH"
                VERCEL_ORG_ID=$VERCEL_ORG_ID VERCEL_PROJECT_ID=$PROJECT_ID vercel env rm  $key --token $VERCEL_TOKEN --yes
                echo $value | VERCEL_ORG_ID=$VERCEL_ORG_ID VERCEL_PROJECT_ID=$PROJECT_ID vercel env add $key $env --token $VERCEL_TOKEN --yes
              fi
              echo "Value: $value"
              #VERCEL_ORG_ID=$VERCEL_ORG_ID VERCEL_PROJECT_ID=$PROJECT_ID vercel env add $key $value --token $VERCEL_TOKEN
            done 
          done
