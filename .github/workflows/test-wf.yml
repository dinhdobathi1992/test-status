name: Deploy Vercel ENV 

on:
  pull_request:
    types:
      - closed

jobs:
  list-changes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1
      - name: Install vercel
        run: npm i -g vercel
      - name: List Changed Files
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN_TEST }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_TEST }}
        run: |
          # Get the base and head SHAs of the merged pull request
          BASE_SHA=$(jq -r '.pull_request.base.sha' "$GITHUB_EVENT_PATH")
          HEAD_SHA=$(jq -r '.pull_request.head.sha' "$GITHUB_EVENT_PATH")
          echo "Base SHA: $BASE_SHA"
          echo "Head SHA: $HEAD_SHA"
          # List changed files between base and head SHAs
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA")

          # Print the list of changed files
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Filter only .env.preview or .env.production can be  processes
          
          while IFS= read -r file; do
              # Get the file extension
              extension="${file##*.}"

              # Check if the file has a ".preview" or ".production" extension
              if [ "$extension" == "preview" ] || [ "$extension" == "production" ]; then
                  # Append the file to the filtered_files variable
                  filtered_files+="$file"$'\n'
              fi
          done <<< "$CHANGED_FILES"

          # Print the filtered files
          echo "Filtered files:"
          echo "$filtered_files"

          # Loop foreach file in filtered file. 
          for file in $filtered_files; do
            echo "File changed: $file"
            
            #get the project name base on file changed's path
            project_name=$(echo "$file" | sed 's|/.env.production$||;s|/.env.preview$||' | awk -F/ '{print $NF}')
            echo "Project name : $project_name"
            
            #get the ENV base on file changed's path
            env="${file#*.env.}"
            echo "Environment: $env"

            #making sure which folder is working on
            working_folder=$(dirname "$file")
            echo "Working folder: $working_folder"

            #get projectID base on project name and predefined project config json  
            json_data=$(cat .github/config/projects.json)
            PROJECT_ID=$(echo $json_data | jq -r ".[] | select(.project == \"$project_name\")" | jq .project_id)

            #remove double-quote after jq 
            PROJECT_ID=${PROJECT_ID//\"/}
            echo "Project ID: $PROJECT_ID"
            

            echo "####testing vercel"
            vercel --version
            #list all env var in current project 
            VERCEL_ORG_ID=$VERCEL_ORG_ID VERCEL_PROJECT_ID=$PROJECT_ID vercel env ls --token $VERCEL_TOKEN
            ./.github/scripts/parse_env.bash $file $VERCEL_TOKEN $VERCEL_ORG_ID $PROJECT_ID $env
            #for eaceh line in .env.preview or .env.production , read the file from 2nd line, split line to key/value pair
            # for line in $(tail -n +2 $file) ; do
            #   #echo "Line: $line"
            #   key=$(echo $line | awk -F= '{print $1}')
            #   value=$(echo $line | awk -F= '{print $2}')
            #   value=${value//\"/}
            #   #echo "Key: $key"

            #   #remove the vercel variable with $env, $key, $projectId 
            #   if [ $key == "REACT_LOGO_WIDTH" ]; then
            #     echo "Key is REACT_LOGO_WIDTH"
            #     VERCEL_ORG_ID=$VERCEL_ORG_ID VERCEL_PROJECT_ID=$PROJECT_ID vercel env rm  $key $env --token $VERCEL_TOKEN --yes
            #     #re-add the vercel variable with $env, $key/value, $projectId 
            #     echo $value | VERCEL_ORG_ID=$VERCEL_ORG_ID VERCEL_PROJECT_ID=$PROJECT_ID vercel env add $key $env --token $VERCEL_TOKEN --yes
            #   fi
            # done 
          done
