name: Deploy AWS ENV

on:
  pull_request:
    types:
      - closed
    paths:
      - "**.dcbencrypted"
jobs:
  update-aws-cfg:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1

      - name: Setup NodeJS 18
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Show NodeJS version
        run: npm --version

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline

      - name: List-Changed-Files
        id: list_file_changed
        shell: bash
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          # Get the base and head SHAs of the merged pull request
          BASE_SHA=$(jq -r '.pull_request.base.sha' "$GITHUB_EVENT_PATH")
          HEAD_SHA=$(jq -r '.pull_request.head.sha' "$GITHUB_EVENT_PATH")
          echo "Base SHA: $BASE_SHA"
          echo "Head SHA: $HEAD_SHA"
          # List changed files between base and head SHAs
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA")

          # Print the list of changed files
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Filter only dcbencrypted can be  processes

          while IFS= read -r file; do
              # Get the file extension
              extension="$(echo "$file" | awk -F'.' '{print $2}')"

              # Check if the file has a ".preview" or ".production" extension
              if [ "$extension" == "dcbencrypted" ] ; then
                  # Append the file to the filtered_files variable
                  filtered_files+="$file"$'\n'
              fi
          done <<< "$CHANGED_FILES"

          # Print the filtered files
          echo "Filtered files:"
          echo "$filtered_files"

          # Loop foreach file in filtered file. 
          for file in $filtered_files; do
            echo "File changed: $file"
            
            #get the client on file changed's path
            client_name=$(dirname "$file" | awk -F/ '{print $NF}')
            echo "Client name : $client_name"
            echo "client_name=$client_name" >> "$GITHUB_OUTPUT"
            echo "CLIENT_NAME=$client_name" >> "$GITHUB_OUTPUT"
            echo "::set-output name=env::$client_name"
          done

      - uses: Fooji/create-aws-profile-action@v1
        with:
          profile: ${{ steps.list_file_changed.outputs.CLIENT_NAME }}
          region: ap-southeast-1
          key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: get caller identity1
        env:
          PROFILE: ${{ steps.list_file_changed.outputs.CLIENT_NAME }}
          ENV: ${{ steps.list_file_changed.outputs.env }}
        run: |
          echo "Profile: $PROFILE"
          echo "ENV: $ENV"
          aws sts get-caller-identity --profile $PROFILE

      # - name: Update
      #   shell: bash
      #   env:
      #     VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      #     VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      #     PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      #   run: |
      #       echo $PRIVATE_KEY > private.pem
      #       cat private.pem
      #       node .github/scripts/decrypt-jsonfile.js

      #       echo "OUTPUT TESTING"
      #       cat aws/example/decrypted_data.json
      #       echo "updating params"
      #       AWS_PROFILE=staging node .github/scripts/set-env-params.js  aws/example/decrypted_data.json
