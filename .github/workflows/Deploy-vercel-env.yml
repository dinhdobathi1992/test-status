name: Deploy Vercel ENV

on:
  workflow_dispatch:
jobs:
  list-changes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1

      - name: Setup NodeJS 18
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Show NodeJS version
        run: npm --version

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline

      - name: List Changed Files
        shell: bash
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          # Get the base and head SHAs of the merged pull request
          BASE_SHA=$(jq -r '.pull_request.base.sha' "$GITHUB_EVENT_PATH")
          HEAD_SHA=$(jq -r '.pull_request.head.sha' "$GITHUB_EVENT_PATH")
          echo "Base SHA: $BASE_SHA"
          echo "Head SHA: $HEAD_SHA"
          # List changed files between base and head SHAs
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA")

          # Print the list of changed files
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Filter only env.preview.json or env.production.json can be  processes

          while IFS= read -r file; do
              # Get the file extension
              extension="$(echo "$file" | awk -F'.' '{print $2}')"

              # Check if the file has a ".preview" or ".production" extension
              if [ "$extension" == "preview" ] || [ "$extension" == "production" ]; then
                  # Append the file to the filtered_files variable
                  filtered_files+="$file"$'\n'
              fi
          done <<< "$CHANGED_FILES"

          # Print the filtered files
          echo "Filtered files:"
          echo "$filtered_files"

          # Loop foreach file in filtered file. 
          for file in $filtered_files; do
            echo "File changed: $file"
            node .github/scripts/decrypt-jsonfile.js
            node .github/scripts/parse_env.js $file $VERCEL_TOKEN $VERCEL_ORG_ID $PROJECT_ID $env
          done
